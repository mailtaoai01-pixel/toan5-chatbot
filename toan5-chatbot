
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Tr·ª£ l√Ω To√°n 5</title>
  <style>
    body { font-family: Arial; background: #001028; color: white; padding: 30px; }
    textarea { width: 100%; height: 100px; border-radius: 10px; padding: 10px; font-size: 16px; }
    button { padding: 10px 20px; font-size: 16px; margin-top: 10px; border: none; border-radius: 8px; cursor: pointer; background: #00bfff; color: white; }
    #response { background: #111; padding: 15px; border-radius: 8px; margin-top: 15px; }
  </style>
</head>
<body>
  <h2>üí¨ Tr·ª£ l√Ω To√°n 5</h2>
  <textarea id="userMsg" placeholder="Nh·∫≠p c√¢u h·ªèi..."></textarea><br>
  <button id="sendBtn">G·ª≠i</button>
  <div id="response"></div>

  <script>
    const sendBtn = document.getElementById('sendBtn');
    const input = document.getElementById('userMsg');
    const responseDiv = document.getElementById('response');

    sendBtn.addEventListener('click', async () => {
      const message = input.value.trim();
      if (!message) return alert('Vui l√≤ng nh·∫≠p c√¢u h·ªèi.');

      responseDiv.innerHTML = '‚è≥ ƒêang g·ª≠i...';
      try {
        const res = await fetch('http://localhost:3000/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ message })
        });

        const data = await res.json();
        responseDiv.innerHTML = data.reply || 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.';
      } catch (err) {
        console.error(err);
        responseDiv.innerHTML = '‚ö†Ô∏è L·ªói k·∫øt n·ªëi t·ªõi server.';
      }
    });
  </script>
</body>
</html>


{
  "name": "toan5-chatbot",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "node-fetch": "^3.3.2",
    "dotenv": "^16.0.3",
    "cors": "^2.8.5"
  }
}

// server.js - simple proxy to OpenAI (Node.js + express)
// Usage:
// 1) npm init -y
// 2) npm install express node-fetch dotenv cors
// 3) create .env with OPENAI_API_KEY=sk-...
// 4) node server.js

const express = require('express');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const OPENAI_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_KEY) {
  console.error('Vui l√≤ng ƒë·∫∑t OPENAI_API_KEY trong file .env');
  process.exit(1);
}

app.use(cors()); // cho ph√©p truy c·∫≠p t·ª´ local
app.use(express.json());

app.post('/api/chat', async (req, res) => {
  const userMsg = (req.body.message || '').toString().trim();
  if (!userMsg) return res.status(400).json({ error: 'No message' });

  try {
    const payload = {
      model: "gpt-4o-mini",
      messages: [
        { role: 'system', content: 'B·∫°n l√† tr·ª£ l√Ω gi√°o vi√™n To√°n l·ªõp 5, gi·∫£i th√≠ch ng·∫Øn g·ªçn, ƒë∆°n gi·∫£n, t·ª´ng b∆∞·ªõc.' },
        { role: 'user', content: userMsg }
      ],
      max_tokens: 400,
      temperature: 0.2
    };

    const apiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!apiRes.ok) {
      const txt = await apiRes.text();
      console.error('OpenAI error:', txt);
      return res.status(500).json({ error: 'OpenAI error', detail: txt });
    }

    const j = await apiRes.json();
    const reply = j.choices && j.choices[0] && j.choices[0].message ? j.choices[0].message.content : 'Xin l·ªói, kh√¥ng c√≥ ph·∫£n h·ªìi.';
    res.json({ reply });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Server error' });
  }
});

app.listen(PORT, ()=> console.log(`Proxy server running on http://localhost:${PORT}`));
